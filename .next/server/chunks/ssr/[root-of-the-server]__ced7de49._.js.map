{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///Users/soumyadeep/Documents/internal-seminar/photorecipe/src/ai/genkit.ts"],"sourcesContent":["import { genkit } from \"genkit\";\nimport { googleAI } from \"@genkit-ai/googleai\";\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: \"googleai/gemini-2.0-flash\",\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///Users/soumyadeep/Documents/internal-seminar/photorecipe/src/ai/flows/analyze-photo-ingredients.ts"],"sourcesContent":["\"use server\";\n\n/**\n * @fileOverview A flow for analyzing ingredients from a photo and suggesting missing ones.\n *\n * - analyzePhotoIngredients - A function that handles the ingredient analysis process.\n * - AnalyzePhotoIngredientsInput - The input type for the analyzePhotoIngredients function.\n * - AnalyzePhotoIngredientsOutput - The return type for the analyzePhotoIngredients function.\n */\n\nimport { ai } from \"@/ai/genkit\";\nimport { z } from \"genkit\";\n\nconst AnalyzePhotoIngredientsInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of ingredients, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type AnalyzePhotoIngredientsInput = z.infer<\n  typeof AnalyzePhotoIngredientsInputSchema\n>;\n\nconst AnalyzePhotoIngredientsOutputSchema = z.object({\n  isFoodItem: z.boolean().describe(\"Whether the photo contains food items.\"),\n  ingredients: z\n    .array(z.string())\n    .describe(\n      \"A list of identified ingredients. This should be empty if isFoodItem is false.\"\n    ),\n  suggestedIngredients: z\n    .array(z.string())\n    .describe(\n      \"A list of suggested ingredients that might be missing. This should be empty if isFoodItem is false.\"\n    ),\n});\nexport type AnalyzePhotoIngredientsOutput = z.infer<\n  typeof AnalyzePhotoIngredientsOutputSchema\n>;\n\nexport async function analyzePhotoIngredients(\n  input: AnalyzePhotoIngredientsInput\n): Promise<AnalyzePhotoIngredientsOutput> {\n  return analyzePhotoIngredientsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: \"analyzePhotoIngredientsPrompt\",\n  input: { schema: AnalyzePhotoIngredientsInputSchema },\n  output: { schema: AnalyzePhotoIngredientsOutputSchema },\n  prompt: `You are an AI that analyzes a photo of ingredients and identifies them. First, determine if the image contains food items. If it does not, set isFoodItem to false and return empty arrays for ingredients and suggestedIngredients.\n\nIf the image does contain food, identify the ingredients, set isFoodItem to true, and suggest any missing ingredients that would complement the identified ones.\n\nAnalyze the ingredients in the following photo:\n\nPhoto: {{media url=photoDataUri}}\n\nFormat your answer as a JSON object with \"isFoodItem\", \"ingredients\" and \"suggestedIngredients\" keys.`,\n});\n\nconst analyzePhotoIngredientsFlow = ai.defineFlow(\n  {\n    name: \"analyzePhotoIngredientsFlow\",\n    inputSchema: AnalyzePhotoIngredientsInputSchema,\n    outputSchema: AnalyzePhotoIngredientsOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAKA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,YAAY,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CACX,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;IAEJ,sBAAsB,uIAAA,CAAA,IAAC,CACpB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;AAEN;AAKO,eAAe,wBACpB,KAAmC;IAEnC,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ;IAAmC;IACpD,QAAQ;QAAE,QAAQ;IAAoC;IACtD,QAAQ,CAAC;;;;;;;;qGAQ0F,CAAC;AACtG;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///Users/soumyadeep/Documents/internal-seminar/photorecipe/src/ai/flows/generate-recipe-from-ingredients.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Recipe generation flow.\n *\n * - generateRecipeFromIngredients - A function that generates a recipe from a list of ingredients.\n * - GenerateRecipeFromIngredientsInput - The input type for the generateRecipeFromIngredients function.\n * - GenerateRecipeFromIngredientsOutput - The return type for the generateRecipeFromIngredients function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateRecipeFromIngredientsInputSchema = z.object({\n  ingredients: z\n    .array(z.string())\n    .describe('A list of ingredients to generate a recipe from.'),\n});\nexport type GenerateRecipeFromIngredientsInput = z.infer<\n  typeof GenerateRecipeFromIngredientsInputSchema\n>;\n\nconst GenerateRecipeFromIngredientsOutputSchema = z.object({\n  recipeName: z.string().describe('The name of the generated recipe.'),\n  ingredients: z\n    .array(z.string())\n    .describe('The list of ingredients required for the recipe.'),\n  steps: z.array(z.string()).describe('The steps to make the recipe.'),\n});\nexport type GenerateRecipeFromIngredientsOutput = z.infer<\n  typeof GenerateRecipeFromIngredientsOutputSchema\n>;\n\nexport async function generateRecipeFromIngredients(\n  input: GenerateRecipeFromIngredientsInput\n): Promise<GenerateRecipeFromIngredientsOutput> {\n  return generateRecipeFromIngredientsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateRecipeFromIngredientsPrompt',\n  input: {schema: GenerateRecipeFromIngredientsInputSchema},\n  output: {schema: GenerateRecipeFromIngredientsOutputSchema},\n  prompt: `You are a professional chef. Generate a recipe based on the following ingredients:\n\nIngredients:\n{{#each ingredients}}\n- {{this}}\n{{/each}}\n\nRecipe name:\n\nIngredients:\n\nSteps:`, // Providing initial structure\n});\n\nconst generateRecipeFromIngredientsFlow = ai.defineFlow(\n  {\n    name: 'generateRecipeFromIngredientsFlow',\n    inputSchema: GenerateRecipeFromIngredientsInputSchema,\n    outputSchema: GenerateRecipeFromIngredientsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2CAA2C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxD,aAAa,uIAAA,CAAA,IAAC,CACX,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd;AAKA,MAAM,4CAA4C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,aAAa,uIAAA,CAAA,IAAC,CACX,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,OAAO,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACtC;AAKO,eAAe,8BACpB,KAAyC;IAEzC,OAAO,kCAAkC;AAC3C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAwC;IACxD,QAAQ;QAAC,QAAQ;IAAyC;IAC1D,QAAQ,CAAC;;;;;;;;;;;MAWL,CAAC;AACP;AAEA,MAAM,oCAAoC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///Users/soumyadeep/Documents/internal-seminar/photorecipe/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzePhotoIngredients as '40780b636c66b6ee6958d5bf08a1870187f635b8cd'} from 'ACTIONS_MODULE0'\nexport {generateRecipeFromIngredients as '40967987106d2ed242d540b2ecde2a7104a6dfcb0a'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":["file:///Users/soumyadeep/Documents/internal-seminar/photorecipe/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///Users/soumyadeep/Documents/internal-seminar/photorecipe/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}